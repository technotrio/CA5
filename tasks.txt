Here are step-by-step instructions for each task mentioned in the project:

 Task Allocation:

Member 1 - Docker Compose File:

1. Create the Docker Compose File:
   - Create a `docker-compose.yml` file to define services.

2. Define Services:
   - Define services for the web server and the database.

3. Configure Ports, Environment Variables, and Volumes:
   - Configure ports, environment variables, and volumes for both services.

4. Ensure Service Communication:
   - Ensure that the services can communicate with each other.

5. Maintain Code on GitHub:
   - Maintained the code on a GitHub repository.

6. Document Building and Running Steps:
   - Documented the steps for using docker-compose.

7.Running the Docker Compose Stack:

 1. Fetch Docker Images:
   - i200828, responsible for the Docker Compose file (Member 1), fetched the Docker images from the group's Docker Hub profile when defining services in the `docker-compose.yml` file.

 2. Provide Instructions in README:
   - Provided instructions in my GitHub repository's README file on how to run the Docker Compose stack using the images from Docker Hub.

Member 2 - Web Server Service:

1. Select and Set Up the Web Server Application:
   Made a flask web app in app.py

2. Configure Dockerfile:
   - Made a dockerfile for the python file

3. Create Docker Image:
   - Created a Docker image for the web server using docker build command

4. Push Docker Image:
   - Pushed the Docker image to the group's Docker Hub profile using docker run and docker push command

5. Document Building and Running Steps:
   - Documented the steps for building and running the web server service.

6. Maintain Code on GitHub:
   - Maintained the code on a GitHub repository.

# Member 3 - Database Service:

1. Choose and Set Up the Database System:
   - Chose a database system, MySQL and set it up.

2. Configure Dockerfile:
   - Configured the Dockerfile for the database service.

3. Create Docker Image:
   - Created a Docker image for the database.

4. Push Docker Image:
   - Pushed the Docker image to the group's Docker Hub profile.

5. Document Building and Running Steps:
   - Documented the steps for building and running the database service.

6. Maintain Code on GitHub:
   - Maintain your code on a GitHub repository.

 Testing Process:

1. Individual Testing:
   - Each member should tested their part individually to ensure it works correctly and independently.

2. Local Docker Environment:
   - We set up a local Docker environment based on your individual services for testing.

3. Document Testing Process:
   - Documented the testing process and ensured that our part functions as expected without reliance on the other members' tasks.

 GitHub Collaboration:

1. Create GitHub Repository:
   - Created a GitHub repository for your collaborative project.

2. Maintain Separate Branches:
   - Each member maintained their code in separate branches within the repository.

3. Regular Commit and Push:
   - Regularly commited and pushed our changes to our respective branches on GitHub.

4. Collaborate on Main Branch:
   - Collaborated on the main branch for the final integration of our Docker Compose setup.

5. Utilize GitHub Features:
   - Utilized GitHub's issue tracking and pull request features for effective collaboration and code review.

 Docker Hub Repository:

1. Push Docker Images:
   - Member 2 and Member 3 pushed their respective images to the group's Docker Hub profile.

2. Document Docker Hub Repository:
   - Ensured that the Docker Hub repository is well-documented with image tags and descriptions.


By following these steps and instructions, your team can effectively collaborate, create, and run the Docker Compose stack using images from Docker Hub. We made sure to communicate and coordinate throughout the process for a successful project execution.
